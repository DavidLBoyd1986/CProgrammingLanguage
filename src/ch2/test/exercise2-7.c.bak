#include <stdio.h>

int invert(int x, int p, int n);

#define TRUE 0
#define FALSE 1

int main(){

	int binaryOne = 0b11111010;
	int position = 4;
	int numOfBitChanged = 3;

	int result;
	result = invert(binaryOne, position, numOfBitChanged);
	//printf("\nbinaryOne = %b\n", binaryOne);
	//printf("\nResult = %b\n\n", result);
}

// x = binary to change
// p = position to start change
// n = num of bits to change. 
int invert(int x, int p, int n){

	printf("\nOriginal x = %b\n", x);
	int xCopy = x;
	int tempBit;
	int saveRightBits = TRUE;

	// Verify x <= p
	if (p > x){
		printf("x can NOT be greater than p, \
		  as p is the maximum number of bits to copy");
		return 1;
	}

	// If x == p, can skip saving right bits.
	if (p == x) {
		saveRightBits = FALSE;
	}

	if (saveRightBits = TRUE){

		int xCopyRightBits = xCopy;
		int xRightBits = 0b0;

		// Copy bits that are rigth of copyBits to xRightBits
		for (int i = 0; i < p-n; i++) {
			tempBit = xCopyRightBits & 1;
			printf("\nTemp Bit = %b\n", tempBit);
			xCopyRightBits = xCopyRightBits >> 1;
			xRightBits = xRightBits | tempBit;
			xRightBits = xRightBits << 1;
		}
		printf("\nxRightBits = %b\n", xRightBits);

	}

	// Create int that starts at end of bits to copy
	xCopy = (xCopy >> (p+1-n));
	int xCopiedBits = 0b0;

	// Copy the bits
	// FLIP THE BITS IN THE SECTION THEY NEED FLIPPED
	for (int i = 0; i < n; i++) {
		tempBit = xCopy & 1;
		printf("\nTemp Bit = %b\n", tempBit);
		xCopy = xCopy >> 1;
		xCopiedBits = xCopiedBits | tempBit;
		xCopiedBits = xCopiedBits << 1;
	}

	printf("\nxCopiedBits = %b\n", xCopiedBits);

	int xLeftBits = xCopy;

	// Combine all the Bits to return x with the xCopiedBits flipped.
	

	//Save the bits that are going to be changed
	x = (x >> (p+1-n)) & ~(~0 << n);
	int output = x;

	printf("\nx = %b\n", output);

	int binaryTest = 0b111110011010;
	int position = 7;
	int num = 4;

	int binaryTestOne = binaryTest;
	printf("\nBinary Test One = %b\n", binaryTestOne);

	//Half Result
	printf("\n%b >> (%i+1-%i)\n", binaryTestOne, position, num);
	int binaryFlipSection = (binaryTest >> (position + 1 - num));
	printf("\nbinaryFlipSection = %b\n", binaryFlipSection);
	
	//Half Result
	printf("\n%b >> (%i+1-%i)\n", binaryTestOne, position, num);
	int binaryTestOneResult = (binaryTestOne >> (position + 1 - num));
	printf("\nBinary test One Half Result = %b\n", binaryTestOneResult);
	//Full Result
	printf("\n%b >> (%i+1-%i) $ (~0 << %i)\n", binaryTestOne, position, num, num);
	binaryTestOneResult = (binaryTestOne >> (position + 1 - num)) & (~0 << num);
	printf("\nBinary test One Full Result = %b\n", binaryTestOneResult);
	
	//Half Result
	printf("\n%b >> (%i+1-%i)\n", binaryTestOne, position, num);
	binaryTestOneResult = (binaryTestOne >> (position + 1 - num));
	printf("\nBinary test One Half Result = %b\n", binaryTestOneResult);
	//Full Result
	printf("\n%b >> (%i+1-%i) $ ~(~0 << %i)\n", binaryTestOne, position, num, num);
	binaryTestOneResult = (binaryTestOne >> (position + 1 - num)) & ~(~0 << num);
	printf("\nBinary test One Full Result = %b\n", binaryTestOneResult);

	int testUnary = ~0;
	printf("\n ~0 = %b\n", testUnary);
	int testUnaryTwo = ~(~0);
	printf("\n ~(~0) = %b\n", testUnaryTwo);
	return output;

}
